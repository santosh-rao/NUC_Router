/*
multithreaded
TCPechod.c
(Echo
server)*/
#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<sys/types.h>
#include<sys/signal.h>
#include<sys/resource.h>
#include<sys/wait.h>
#include<sys/socket.h>
#include<sys/time.h>
#include<unistd.h>
#include<netinet/in.h>
#include<pthread.h>
struct
sockaddr_in
serv_addr;
struct{
pthread_mutex_t
st_mutex;
unsigned
int
st_concount;
unsigned
int
st_contotal;
unsigned
long
st_contime;
unsigned
long
st_bytecount;
}stats;
void
prstats(void);
int
passivesock(const
char
*service,const
char
*transport);
void
*TCPecho(void
*data);
void
error(const
char
*msg)
{
perror(msg);
exit(1);
}
int
main(int
argc,char
*argv[])
{
pthread_t
th;
pthread_attr_t
ta;
char
*service="echo";
char
*transport="tcp";
int
msock,ssock;
unsigned
int
alen;
switch(argc)
{
case
1:break;
case
2:service=argv[1];
break;
default:error("usage:
TCPecho[port]");
}
msock=passivesock(service,transport);
(void)pthread_attr_init(&ta);
(void)pthread_attr_setdetachstate(&ta,PTHREAD_CREATE_DETACHED);
(void)pthread_mutex_init(&stats.st_mutex,0);
if(pthread_create(&th,&ta,(void
*)prstats,0)<0)
error("error
creating
statistics
thread");
while(1)
{
alen=sizeof(serv_addr);
ssock=accept(msock,(struct
sockaddr
*)&serv_addr,&alen);
if(ssock<0)
error("accept
failed");
else
{
if((pthread_create(&th,NULL,(void
*)TCPecho,&ssock))<0)
error("error
creating
echo
thread");
}
}
}
int
passivesock(const
char
*service,const
char
*transport)
{
printf("\n********************SERVER
STARTED************************");
int
portno;
int
type,sockfd;
printf("\nEnter
the
port
number
:");
scanf("%d",&portno);
memset(&serv_addr,0,sizeof(serv_addr));
serv_addr.sin_family=AF_INET;
serv_addr.sin_addr.s_addr=INADDR_ANY;
serv_addr.sin_port=htons(portno);
if(strcmp(transport,"tcp")==0)
type=SOCK_STREAM;
else
type=SOCK_DGRAM;
sockfd=socket(AF_INET,type,0);
if(sockfd<0)
error("error
opening
socket");
if(bind(sockfd,(struct
sockaddr
*)&serv_addr,sizeof(serv_addr))<0)
error("error
on
binding");
listen(sockfd,5);
return
sockfd;
}
/**
code
for
TCP
echo**/
void
*TCPecho(void
*data)
{
char
buff[256];
int
cc,fd;
time_t
start;
start=time(0);
(void)pthread_mutex_lock(&stats.st_mutex);
stats.st_concount++;
(void)pthread_mutex_unlock(&stats.st_mutex);
fd
=
*((int*)data);
while((cc=read(fd,buff,sizeof(buff))))
//here
cc
is
the
number
of
bytes
received
which
will
be
size
of
buffer
{
if(cc<0)
error("error
in
echo
reading
from
socket");
else
{
if(write(fd,buff,cc)<0)
error("error
in
echo
writing
to
socket");
}
(void)pthread_mutex_lock(&stats.st_mutex);
stats.st_bytecount=stats.st_bytecount+cc;
(void)pthread_mutex_unlock(&stats.st_mutex);
}
close(fd);
(void)pthread_mutex_lock(&stats.st_mutex);
stats.st_contime+=time(0)-­‐start;
stats.st_concount-­‐-­‐;
stats.st_contotal++;
(void)pthread_mutex_unlock(&stats.st_mutex);
return
NULL;
}
/**
print
server
statistical
data**/
